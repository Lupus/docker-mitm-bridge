name: Kyverno Interceptor Chart - E2E Tests

on:
  pull_request:
    paths:
      - 'cilium-tls-poc/kyverno-intercept-chart/**'
      - 'cilium-tls-poc/xds-service/**'
      - '.github/workflows/kyverno-chart-e2e.yaml'
  push:
    branches:
      - main
    paths:
      - 'cilium-tls-poc/kyverno-intercept-chart/**'
      - 'cilium-tls-poc/xds-service/**'
      - '.github/workflows/kyverno-chart-e2e.yaml'
  workflow_dispatch:

jobs:
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.18.5

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: v1.31.9

      - name: Install BATS
        run: |
          sudo npm install -g bats

      - name: Set Image Tag
        run: |
          IMAGE_TAG="ci-${GITHUB_SHA::8}"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "Will use xDS image tag: ${IMAGE_TAG}"

      - name: Build xDS Service Image
        run: |
          echo "Building xDS service image with tag: ${IMAGE_TAG}"
          cd cilium-tls-poc/xds-service
          docker build --network=host -t ghcr.io/lupus/docker-mitm-bridge/xds-service:${IMAGE_TAG} .
          echo "Image built successfully"
          docker images ghcr.io/lupus/docker-mitm-bridge/xds-service:${IMAGE_TAG}

      - name: Create kind cluster and load image
        run: |
          # Create cluster
          kind create cluster --name kyverno-test --image kindest/node:v1.31.9 --wait 120s

          # Load the xDS service image
          echo "Loading xDS image with tag: ${IMAGE_TAG}"
          kind load docker-image ghcr.io/lupus/docker-mitm-bridge/xds-service:${IMAGE_TAG} --name kyverno-test
          echo "Image loaded to kind cluster"

      - name: Verify cluster
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Install Kyverno
        run: |
          helm repo add kyverno https://kyverno.github.io/kyverno/
          helm repo update
          helm install kyverno kyverno/kyverno \
            -n kyverno \
            --create-namespace \
            --wait \
            --timeout 5m

          echo "Verifying Kyverno installation..."
          kubectl get pods -n kyverno

          # Wait for admission controller specifically
          kubectl wait --for=condition=ready pod \
            -l app.kubernetes.io/component=admission-controller \
            -n kyverno \
            --timeout=300s || true

      - name: Install Interceptor Chart
        working-directory: cilium-tls-poc/kyverno-intercept-chart
        run: |
          kubectl create namespace kyverno-intercept

          echo "Installing chart with xDS image tag: ${IMAGE_TAG}"
          helm upgrade --install intercept-proxy . \
            -n kyverno-intercept \
            --wait \
            --timeout 5m \
            --set testWorkload.enabled=false \
            --set xds.image.tag=${IMAGE_TAG} \
            --set xds.image.pullPolicy=IfNotPresent

          echo "Chart installed with CI-built xDS image, CA will be generated inline by init containers"

      - name: Verify chart installation
        run: |
          kubectl get clusterpolicy
          kubectl get configmap,secret -n kyverno-intercept
          kubectl get all -n kyverno-intercept

      - name: Run E2E Tests - Deployment
        working-directory: cilium-tls-poc/kyverno-intercept-chart
        run: |
          bats test/e2e/test-deployment.bats

      - name: Run E2E Tests - ConfigMap Cloning
        working-directory: cilium-tls-poc/kyverno-intercept-chart
        run: |
          bats test/e2e/test-configmap-cloning.bats

      - name: Run E2E Tests - TLS Interception
        working-directory: cilium-tls-poc/kyverno-intercept-chart
        run: |
          bats test/e2e/test-tls.bats

      - name: Run E2E Tests - OPA Policy
        working-directory: cilium-tls-poc/kyverno-intercept-chart
        run: |
          bats test/e2e/test-opa-policy.bats

      - name: Run E2E Tests - Port Isolation
        working-directory: cilium-tls-poc/kyverno-intercept-chart
        run: |
          bats test/e2e/test-port-isolation.bats

      - name: Run E2E Tests - Network Isolation
        working-directory: cilium-tls-poc/kyverno-intercept-chart
        run: |
          bats test/e2e/test-network-isolation.bats

      - name: Run E2E Tests - xDS Security
        working-directory: cilium-tls-poc/kyverno-intercept-chart
        run: |
          bats test/e2e/test-xds-security.bats

      - name: Run E2E Tests - Per-Pod OPA Policy
        working-directory: cilium-tls-poc/kyverno-intercept-chart
        run: |
          bats test/e2e/test-per-pod-opa-policy.bats

      - name: Debug - Show pod details on failure
        if: failure()
        run: |
          echo "=== Pods ==="
          kubectl get pods -n kyverno-intercept -o wide

          echo "=== Pod Descriptions ==="
          kubectl describe pods -n kyverno-intercept

          echo "=== Test Pod Logs ==="
          POD_NAME=$(kubectl get pod -l app=test-app -n kyverno-intercept -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "not-found")
          if [ "$POD_NAME" != "not-found" ]; then
            echo "--- Init Container: proxy-init ---"
            kubectl logs -n kyverno-intercept "$POD_NAME" -c proxy-init || true

            echo "--- Init Container: opa-data-setup ---"
            kubectl logs -n kyverno-intercept "$POD_NAME" -c opa-data-setup || true

            echo "--- Envoy Logs ---"
            kubectl logs -n kyverno-intercept "$POD_NAME" -c envoy-proxy --tail=100 || true

            echo "--- OPA Logs ---"
            kubectl logs -n kyverno-intercept "$POD_NAME" -c opa-sidecar --tail=100 || true

            echo "--- xDS Logs ---"
            kubectl logs -n kyverno-intercept "$POD_NAME" -c xds-service --tail=100 || true

            echo "--- App Container Logs ---"
            kubectl logs -n kyverno-intercept "$POD_NAME" -c test-container --tail=100 || true
          fi

          echo "=== Kyverno Logs ==="
          kubectl logs -n kyverno -l app.kubernetes.io/name=kyverno --tail=100

      - name: Cleanup
        if: always()
        run: |
          helm uninstall intercept-proxy -n kyverno-intercept || true
          kubectl delete namespace kyverno-intercept --wait=false || true
