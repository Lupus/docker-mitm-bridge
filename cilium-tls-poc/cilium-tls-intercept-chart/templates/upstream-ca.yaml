---
apiVersion: v1
kind: ConfigMap
metadata:
  name: intercept-upstream-ca-script
  namespace: {{ .Values.namespace.secrets }}
  labels:
    {{ include "cilium-tls-intercept.labels" . | nindent 4 }}
    app.kubernetes.io/component: upstream-ca
data:
  create-ca-bundle.sh: |
    #!/bin/sh
    set -e

    echo "Creating upstream CA bundle..."

    # Try to get CA bundle from the host system
    if [ -f /host-ca/ca-certificates.crt ]; then
      cp /host-ca/ca-certificates.crt /tmp/ca-bundle.crt
    elif [ -f /host-ca/ca-bundle.crt ]; then
      cp /host-ca/ca-bundle.crt /tmp/ca-bundle.crt
    else
      echo "Warning: Could not find host CA bundle, using container's bundle"
      cp /etc/ssl/certs/ca-certificates.crt /tmp/ca-bundle.crt || \
      cp /etc/ssl/certs/ca-bundle.crt /tmp/ca-bundle.crt || \
      echo "Error: No CA bundle found"
    fi

    kubectl create secret generic intercept-upstream-ca-bundle \
      --from-file=ca.crt=/tmp/ca-bundle.crt \
      --namespace={{ .Values.namespace.secrets }} \
      --dry-run=client -o yaml | \
      kubectl create -f - || \
      kubectl replace -f -

    echo "Upstream CA bundle secret created"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: intercept-upstream-ca-{{ .Release.Revision }}
  namespace: {{ .Values.namespace.secrets }}
  labels:
    {{ include "cilium-tls-intercept.labels" . | nindent 4 }}
    app.kubernetes.io/component: upstream-ca
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      labels:
        {{ include "cilium-tls-intercept.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: upstream-ca
    spec:
      restartPolicy: Never
      serviceAccountName: intercept-upstream-ca
      containers:
      - name: ca-creator
        image: bitnami/kubectl:latest
        command: ["/bin/sh", "/scripts/create-ca-bundle.sh"]
        volumeMounts:
        - name: script
          mountPath: /scripts
        - name: host-ca
          mountPath: /host-ca
          readOnly: true
      volumes:
      - name: script
        configMap:
          name: intercept-upstream-ca-script
          defaultMode: 0755
      - name: host-ca
        hostPath:
          path: /etc/ssl/certs
          type: Directory
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: intercept-upstream-ca
  namespace: {{ .Values.namespace.secrets }}
  labels:
    {{ include "cilium-tls-intercept.labels" . | nindent 4 }}
    app.kubernetes.io/component: upstream-ca
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: intercept-upstream-ca
  namespace: {{ .Values.namespace.secrets }}
  labels:
    {{ include "cilium-tls-intercept.labels" . | nindent 4 }}
    app.kubernetes.io/component: upstream-ca
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: intercept-upstream-ca
  namespace: {{ .Values.namespace.secrets }}
  labels:
    {{ include "cilium-tls-intercept.labels" . | nindent 4 }}
    app.kubernetes.io/component: upstream-ca
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: intercept-upstream-ca
subjects:
- kind: ServiceAccount
  name: intercept-upstream-ca
  namespace: {{ .Values.namespace.secrets }}