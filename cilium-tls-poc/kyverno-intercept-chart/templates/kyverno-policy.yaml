apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: {{ .Release.Name }}-inject-proxy
spec:
  background: false
  validationFailureAction: Audit
  rules:
  # Inject init container
  - name: inject-init-container
    match:
      any:
      - resources:
          kinds:
          - Pod
          selector:
            matchLabels:
              "{{ .Values.kyverno.annotationKey }}": "{{ .Values.kyverno.annotationValue }}"
    mutate:
      patchStrategicMerge:
        spec:
          initContainers:
          - name: proxy-init
            image: {{ .Values.initContainer.image }}
            imagePullPolicy: IfNotPresent
            securityContext:
              capabilities:
                add:
                - NET_ADMIN
                - NET_RAW
              runAsNonRoot: false
              runAsUser: 0
            command:
            - /bin/sh
            - -c
            - |
              set -ex

              # Install CA certificate to system store
              echo "Installing CA certificate..."
              cp /ca-bundle/ca.crt /usr/local/share/ca-certificates/intercept-ca.crt
              update-ca-certificates

              # Also copy to shared volume for other containers
              cp /ca-bundle/ca.crt /shared-ca-certs/intercept-ca.crt
              # Merge with system certificates
              cat /etc/ssl/certs/ca-certificates.crt /ca-bundle/ca.crt > /shared-ca-certs/ca-certificates.crt 2>/dev/null || true

              # Setup iptables rules for traffic interception
              echo "Setting up iptables rules..."

              ENVOY_UID={{ .Values.envoy.uid }}
              OPA_UID={{ .Values.opa.uid }}
              ENVOY_PROXY_PORT={{ .Values.envoy.port }}

              # ============================================
              # NAT table - Traffic redirection
              # ============================================
              iptables -t nat -N PROXY_REDIRECT 2>/dev/null || true
              iptables -t nat -F PROXY_REDIRECT

              # CRITICAL: Exclude sidecar traffic to prevent infinite loops
              iptables -t nat -A PROXY_REDIRECT -m owner --uid-owner ${ENVOY_UID} -j RETURN
              iptables -t nat -A PROXY_REDIRECT -m owner --uid-owner ${OPA_UID} -j RETURN

              # Redirect HTTP/HTTPS traffic to Envoy
              {{- range .Values.initContainer.redirectPorts }}
              iptables -t nat -A PROXY_REDIRECT -p tcp --dport {{ . }} -j REDIRECT --to-port ${ENVOY_PROXY_PORT}
              {{- end }}

              # Apply redirection
              iptables -t nat -A OUTPUT -p tcp -j PROXY_REDIRECT

              # ============================================
              # FILTER table - Port isolation
              # ============================================
              iptables -t filter -N SIDECAR_ISOLATE 2>/dev/null || true
              iptables -t filter -F SIDECAR_ISOLATE

              # Allow all traffic from Envoy/OPA sidecars (UIDs {{ .Values.envoy.uid }} and {{ .Values.opa.uid }})
              iptables -t filter -A SIDECAR_ISOLATE -m owner --uid-owner ${ENVOY_UID} -j ACCEPT
              iptables -t filter -A SIDECAR_ISOLATE -m owner --uid-owner ${OPA_UID} -j ACCEPT

              # For main container accessing localhost:

              # 1. Block privileged ports (0-{{ .Values.initContainer.privilegedPortEnd }}) for safety
              iptables -t filter -A SIDECAR_ISOLATE -d 127.0.0.1 -p tcp --dport 0:{{ .Values.initContainer.privilegedPortEnd }} -j REJECT --reject-with tcp-reset

              # 2. Allow redirected traffic to Envoy proxy port (needed after NAT redirect)
              iptables -t filter -A SIDECAR_ISOLATE -d 127.0.0.1 -p tcp --dport {{ .Values.envoy.port }} -j ACCEPT

              # 3. Block other sidecar infrastructure ports ({{ .Values.initContainer.sidecarPortRangeStart }}-{{ .Values.initContainer.sidecarPortRangeEnd }})
              iptables -t filter -A SIDECAR_ISOLATE -d 127.0.0.1 -p tcp --dport {{ .Values.initContainer.sidecarPortRangeStart }}:{{ .Values.initContainer.sidecarPortRangeEnd }} -j REJECT --reject-with tcp-reset

              # 4. Allow everything else on localhost (app development ports)
              iptables -t filter -A SIDECAR_ISOLATE -d 127.0.0.1 -j ACCEPT

              # Allow DNS (required for hostname resolution)
              iptables -t filter -A SIDECAR_ISOLATE -p udp --dport 53 -j ACCEPT
              iptables -t filter -A SIDECAR_ISOLATE -p tcp --dport 53 -j ACCEPT

              # Allow outbound HTTP/HTTPS to internet (will be redirected by NAT)
              {{- range .Values.initContainer.redirectPorts }}
              iptables -t filter -A SIDECAR_ISOLATE -p tcp --dport {{ . }} -j ACCEPT
              {{- end }}

              # Block all other outbound traffic from main container
              # Using DROP instead of REJECT for catch-all rule to avoid iptables compatibility issues
              iptables -t filter -A SIDECAR_ISOLATE -j DROP

              # Apply isolation
              iptables -t filter -A OUTPUT -j SIDECAR_ISOLATE

              # List rules for debugging
              echo "iptables rules applied:"
              echo "=== NAT table ==="
              iptables -t nat -L -v -n
              echo "=== FILTER table ==="
              iptables -t filter -L -v -n

              echo "Init container completed successfully!"
              echo "- Main container can make HTTP/HTTPS requests (redirected to Envoy)"
              echo "- Main container can use localhost for development"
              echo "- Main container CANNOT access privileged ports (0-{{ .Values.initContainer.privilegedPortEnd }})"
              echo "- Main container CANNOT access sidecar ports ({{ .Values.initContainer.sidecarPortRangeStart }}-{{ .Values.initContainer.sidecarPortRangeEnd }})"
            volumeMounts:
            - name: ca-bundle
              mountPath: /ca-bundle
              readOnly: true
            - name: ca-certificates
              mountPath: /shared-ca-certs

  # Inject Envoy sidecar
  - name: inject-envoy-sidecar
    match:
      any:
      - resources:
          kinds:
          - Pod
          selector:
            matchLabels:
              "{{ .Values.kyverno.annotationKey }}": "{{ .Values.kyverno.annotationValue }}"
    mutate:
      patchStrategicMerge:
        spec:
          containers:
          - name: envoy-proxy
            image: {{ .Values.envoy.image }}
            imagePullPolicy: IfNotPresent
            args:
            - "-c"
            - "/etc/envoy/config/envoy.yaml"
            - "--log-level"
            - "{{ .Values.envoy.logLevel }}"
            ports:
            - name: proxy
              containerPort: {{ .Values.envoy.port }}
              protocol: TCP
            - name: admin
              containerPort: {{ .Values.envoy.adminPort }}
              protocol: TCP
            resources:
              {{- toYaml .Values.envoy.resources | nindent 14 }}
            securityContext:
              runAsUser: {{ .Values.envoy.uid }}
              runAsGroup: {{ .Values.envoy.gid }}
              runAsNonRoot: true
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: false
            volumeMounts:
            - name: envoy-config
              mountPath: /etc/envoy/config
              readOnly: true
            {{- range $group, $config := .Values.interceptDomains }}
            {{- if $config.enabled }}
            {{- range $domain := $config.domains }}
            {{- $domainSanitized := $domain | replace "*" "-wildcard-" | replace "." "-" }}
            - name: cert-{{ $domainSanitized }}
              mountPath: /etc/envoy/certs/{{ $domainSanitized | replace "*" "wildcard" }}
              readOnly: true
            {{- end }}
            {{- end }}
            {{- end }}
            - name: ca-certificates-system
              mountPath: /etc/ssl/certs
              readOnly: true
            livenessProbe:
              httpGet:
                path: /ready
                port: admin
              initialDelaySeconds: 10
              periodSeconds: 5
            readinessProbe:
              httpGet:
                path: /ready
                port: admin
              initialDelaySeconds: 5
              periodSeconds: 5

          {{- if .Values.opa.enabled }}
          - name: opa-sidecar
            image: {{ .Values.opa.image }}
            imagePullPolicy: IfNotPresent
            args:
            - "run"
            - "--server"
            - "--addr=0.0.0.0:{{ .Values.opa.port }}"
            - "--config-file=/config/config.yaml"
            - "/policies/policy.rego"
            - "/policies/data.yml"
            ports:
            - name: opa
              containerPort: {{ .Values.opa.port }}
              protocol: TCP
            - name: opa-grpc
              containerPort: {{ .Values.opa.grpcPort }}
              protocol: TCP
            resources:
              {{- toYaml .Values.opa.resources | nindent 14 }}
            securityContext:
              runAsUser: {{ .Values.opa.uid }}
              runAsGroup: {{ .Values.opa.gid }}
              runAsNonRoot: true
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
            volumeMounts:
            - name: opa-policy
              mountPath: /policies
              readOnly: true
            - name: opa-config
              mountPath: /config
              readOnly: true
            livenessProbe:
              httpGet:
                path: /health
                port: {{ .Values.opa.port }}
              initialDelaySeconds: 10
              periodSeconds: 5
            readinessProbe:
              httpGet:
                path: /health
                port: {{ .Values.opa.port }}
              initialDelaySeconds: 5
              periodSeconds: 5
          {{- end }}

  # Inject volumes
  - name: inject-volumes
    match:
      any:
      - resources:
          kinds:
          - Pod
          selector:
            matchLabels:
              "{{ .Values.kyverno.annotationKey }}": "{{ .Values.kyverno.annotationValue }}"
    mutate:
      patchStrategicMerge:
        spec:
          volumes:
          - name: ca-bundle
            configMap:
              name: {{ .Release.Name }}-ca-bundle
          - name: ca-certificates
            emptyDir: {}
          - name: ca-certificates-system
            hostPath:
              path: /etc/ssl/certs
              type: Directory
          - name: envoy-config
            configMap:
              name: {{ .Release.Name }}-envoy-config
          {{- if .Values.opa.enabled }}
          - name: opa-policy
            configMap:
              name: {{ .Release.Name }}-opa-policy
          - name: opa-config
            configMap:
              name: {{ .Release.Name }}-opa-config
          {{- end }}
          {{- range $group, $config := .Values.interceptDomains }}
          {{- if $config.enabled }}
          {{- range $domain := $config.domains }}
          {{- $domainSanitized := $domain | replace "*" "-wildcard-" | replace "." "-" }}
          - name: cert-{{ $domainSanitized }}
            secret:
              secretName: {{ $.Release.Name }}-cert-{{ $domainSanitized }}
              defaultMode: 0644
          {{- end }}
          {{- end }}
          {{- end }}

  # Inject CA certificates into all containers
  - name: inject-ca-certs
    match:
      any:
      - resources:
          kinds:
          - Pod
          selector:
            matchLabels:
              "{{ .Values.kyverno.annotationKey }}": "{{ .Values.kyverno.annotationValue }}"
    mutate:
      foreach:
      - list: "request.object.spec.containers[]"
        patchStrategicMerge:
          spec:
            containers:
            - name: "{{ `{{ element.name }}` }}"
              env:
              - name: SSL_CERT_FILE
                value: "/etc/ssl/certs/ca-certificates.crt"
              - name: CA_BUNDLE
                value: "/etc/ssl/certs/ca-certificates.crt"
              - name: CURL_CA_BUNDLE
                value: "/etc/ssl/certs/ca-certificates.crt"
              - name: REQUESTS_CA_BUNDLE
                value: "/etc/ssl/certs/ca-certificates.crt"
              - name: NODE_EXTRA_CA_CERTS
                value: "/etc/ssl/certs/intercept-ca.crt"
              volumeMounts:
              - name: ca-certificates
                mountPath: /etc/ssl/certs
                readOnly: true

  {{- if .Values.kyverno.injectEnvVars }}
  # Inject environment variables into all containers
  - name: inject-proxy-env-vars
    match:
      any:
      - resources:
          kinds:
          - Pod
          selector:
            matchLabels:
              "{{ .Values.kyverno.annotationKey }}": "{{ .Values.kyverno.annotationValue }}"
    mutate:
      foreach:
      - list: "request.object.spec.containers[]"
        patchStrategicMerge:
          spec:
            containers:
            - name: "{{ `{{ element.name }}` }}"
              env:
              - name: HTTP_PROXY
                value: {{ .Values.kyverno.envVars.HTTP_PROXY | quote }}
              - name: HTTPS_PROXY
                value: {{ .Values.kyverno.envVars.HTTPS_PROXY | quote }}
              - name: NO_PROXY
                value: {{ .Values.kyverno.envVars.NO_PROXY | quote }}
              - name: SSL_CERT_FILE
                value: "/usr/local/share/ca-certificates/intercept-ca.crt"
              volumeMounts:
              - name: ca-certificates
                mountPath: /usr/local/share/ca-certificates
                readOnly: true
  {{- end }}